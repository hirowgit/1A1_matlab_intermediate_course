<?xml version="1.0" encoding="utf-8"?>
<mscript xmlns:mwsh="http://www.mathworks.com/namespace/mcode/v1/syntaxhighlight.dtd">
   <version>9.12</version>
   <release>2022a</release>
   <date>2022-11-30</date>
   <cell style="overview">
      <count>1</count>
      <steptitle style="document">MATLAB programming course for beginners, supported by Wagatsuma Lab@Kyutech</steptitle>
      <text>
         <p>/* The MIT License (MIT): Copyright (c) 2022 Hiroaki Wagatsuma and Wagatsuma Lab@Kyutech</p>
         <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
         <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
         <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */</p>
      </text>
      <cellOutputTarget>1</cellOutputTarget>
   </cell>
   <cell>
      <count>2</count>
      <steptitle>Specifications and requirements</steptitle>
      <text>
         <ol>
            <li>@Time    : 2022-8-10</li>
            <li>@Author  : Hiroaki Wagatsuma</li>
            <li>@Site    : <a href="https://github.com/hirowgit/1A1_matlab_intermediate_course">https://github.com/hirowgit/1A1_matlab_intermediate_course</a>
            </li>
            <li>@IDE     : MATLAB R2022a</li>
            <li>@File    : lec0b_step2.m</li>
         </ol>
      </text>
      <cellOutputTarget>2</cellOutputTarget>
   </cell>
   <cell>
      <count>3</count>
      <steptitle>Main program</steptitle>
      <mcode>NofD=5;
maxD=5;

rM=rand(NofD,NofD);

binaryM=(rM&gt;0.5);

disp('binaryM');
disp(binaryM);
key=find(~binaryM);

doubleM=double(binaryM);
doubleM(key)=3;
disp('doubleM');
disp(doubleM);

intM=floor(rM*maxD)+1;
disp('intM');
disp(intM);

key=find(intM&lt;5);
intM2=intM;
intM2(key)=0;
disp('intM2');
disp(intM2);

s_intM=sort(intM);
disp('s_intM');
disp(s_intM);


% s_intM=[
%      1     2     1     1     2
%      3     2     2     1     4
%      4     2     2     2     4
%      4     2     3     2     4
%      4     2     4     5     5];

% s_intM=[
%      1     2     1     1     1
%      2     3     2     2     1
%      2     3     3     2     1
%      4     5     3     2     3
%      5     5     5     2     5];

% s_intM=[
%      1     1     1     1     1
%      1     2     1     2     3
%      1     2     1     3     5
%      1     4     3     4     5
%      1     5     4     5     5];
% disp(s_intM);


dM=diff(s_intM);

[ki kj]=find(dM&gt;0);

LackNum=setdiff([1:NofD],unique(kj));

sM=sortrows([[zeros(length(LackNum),1); ki] [LackNum';kj]],2);
ki=sM(:,1); kj=sM(:,2);

mD=max(max(dM));
ti2=[]; tj2=[];
for i=2:mD
    [ti tj]=find(dM==i);
    if ~isempty(ti)
        sM=sortrows([[repmat(ti,[i-1,1]);ti2] [repmat(tj,[i-1,1]);tj2]],2);
        ti2=sM(:,1); tj2=sM(:,2);
    end

end

if ~isempty(ti2)
        sM=sortrows([[ti2; ki] [tj2; kj]],2);
        ki=sM(:,1); kj=sM(:,2);
end

sect_id=[0 find(diff(kj)&gt;0)' length(kj)];
sect=[sect_id(1:end-1)+1; sect_id(2:end)];
sect_eg=mat2cell(sect',ones(1,NofD),2);

sect_data=cellfun(@(x) sort(ki(x(1):x(2))),sect_eg,'UniformOutput',false);
key=cell2mat(cellfun(@(x) length(x)&lt;=1,sect_data,'UniformOutput',false));
key2=find(key);
key3=key2(cell2mat(sect_data(key))==0);
if sum(key3)&gt;0
    sect_data(key3)={[]};
end

NofE_data=cellfun(@(x) diff([0 x' NofD]),sect_data,'UniformOutput',false);
zeroS=cell(size(NofE_data));
zeroE=cell(size(NofE_data));

keyL=find(cell2mat(cellfun(@(x) length(x)&lt;maxD,NofE_data,'UniformOutput',false)));
if ~isempty(keyL)
    terM=cell2mat(sect_eg(keyL));

    terM1=terM(:,1);
    trNum=mat2cell(s_intM(1,kj(terM1))',ones(1,length(kj(terM1))));
    zeroS(kj(terM1))=cellfun(@(x) zeros(1,x-1),trNum,'UniformOutput',false);

    trNum=mat2cell(s_intM(NofD,kj(terM1))',ones(1,length(kj(terM1))));
    zeroE(kj(terM1))=cellfun(@(x) zeros(1,NofD-x),trNum,'UniformOutput',false);

    NofE_data2=cellfun(@(x,y,z) [x, y, z],zeroS,NofE_data,zeroE,'UniformOutput',false);
else
    NofE_data2=NofE_data;
end

NofE_data_m=cell2mat(NofE_data2);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">NofD=5;
maxD=5;

rM=rand(NofD,NofD);

binaryM=(rM&gt;0.5);

disp(<mwsh:strings xml:space="preserve">'binaryM'</mwsh:strings>);
disp(binaryM);
key=find(~binaryM);

doubleM=double(binaryM);
doubleM(key)=3;
disp(<mwsh:strings xml:space="preserve">'doubleM'</mwsh:strings>);
disp(doubleM);

intM=floor(rM*maxD)+1;
disp(<mwsh:strings xml:space="preserve">'intM'</mwsh:strings>);
disp(intM);

key=find(intM&lt;5);
intM2=intM;
intM2(key)=0;
disp(<mwsh:strings xml:space="preserve">'intM2'</mwsh:strings>);
disp(intM2);

s_intM=sort(intM);
disp(<mwsh:strings xml:space="preserve">'s_intM'</mwsh:strings>);
disp(s_intM);


<mwsh:comments xml:space="preserve">% s_intM=[</mwsh:comments>
<mwsh:comments xml:space="preserve">%      1     2     1     1     2</mwsh:comments>
<mwsh:comments xml:space="preserve">%      3     2     2     1     4</mwsh:comments>
<mwsh:comments xml:space="preserve">%      4     2     2     2     4</mwsh:comments>
<mwsh:comments xml:space="preserve">%      4     2     3     2     4</mwsh:comments>
<mwsh:comments xml:space="preserve">%      4     2     4     5     5];</mwsh:comments>

<mwsh:comments xml:space="preserve">% s_intM=[</mwsh:comments>
<mwsh:comments xml:space="preserve">%      1     2     1     1     1</mwsh:comments>
<mwsh:comments xml:space="preserve">%      2     3     2     2     1</mwsh:comments>
<mwsh:comments xml:space="preserve">%      2     3     3     2     1</mwsh:comments>
<mwsh:comments xml:space="preserve">%      4     5     3     2     3</mwsh:comments>
<mwsh:comments xml:space="preserve">%      5     5     5     2     5];</mwsh:comments>

<mwsh:comments xml:space="preserve">% s_intM=[</mwsh:comments>
<mwsh:comments xml:space="preserve">%      1     1     1     1     1</mwsh:comments>
<mwsh:comments xml:space="preserve">%      1     2     1     2     3</mwsh:comments>
<mwsh:comments xml:space="preserve">%      1     2     1     3     5</mwsh:comments>
<mwsh:comments xml:space="preserve">%      1     4     3     4     5</mwsh:comments>
<mwsh:comments xml:space="preserve">%      1     5     4     5     5];</mwsh:comments>
<mwsh:comments xml:space="preserve">% disp(s_intM);</mwsh:comments>


dM=diff(s_intM);

[ki kj]=find(dM&gt;0);

LackNum=setdiff([1:NofD],unique(kj));

sM=sortrows([[zeros(length(LackNum),1); ki] [LackNum';kj]],2);
ki=sM(:,1); kj=sM(:,2);

mD=max(max(dM));
ti2=[]; tj2=[];
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> i=2:mD
    [ti tj]=find(dM==i);
    <mwsh:keywords xml:space="preserve">if</mwsh:keywords> ~isempty(ti)
        sM=sortrows([[repmat(ti,[i-1,1]);ti2] [repmat(tj,[i-1,1]);tj2]],2);
        ti2=sM(:,1); tj2=sM(:,2);
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:keywords xml:space="preserve">if</mwsh:keywords> ~isempty(ti2)
        sM=sortrows([[ti2; ki] [tj2; kj]],2);
        ki=sM(:,1); kj=sM(:,2);
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

sect_id=[0 find(diff(kj)&gt;0)' length(kj)];
sect=[sect_id(1:end-1)+1; sect_id(2:end)];
sect_eg=mat2cell(sect',ones(1,NofD),2);

sect_data=cellfun(@(x) sort(ki(x(1):x(2))),sect_eg,<mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>,false);
key=cell2mat(cellfun(@(x) length(x)&lt;=1,sect_data,<mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>,false));
key2=find(key);
key3=key2(cell2mat(sect_data(key))==0);
<mwsh:keywords xml:space="preserve">if</mwsh:keywords> sum(key3)&gt;0
    sect_data(key3)={[]};
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

NofE_data=cellfun(@(x) diff([0 x' NofD]),sect_data,<mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>,false);
zeroS=cell(size(NofE_data));
zeroE=cell(size(NofE_data));

keyL=find(cell2mat(cellfun(@(x) length(x)&lt;maxD,NofE_data,<mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>,false)));
<mwsh:keywords xml:space="preserve">if</mwsh:keywords> ~isempty(keyL)
    terM=cell2mat(sect_eg(keyL));

    terM1=terM(:,1);
    trNum=mat2cell(s_intM(1,kj(terM1))',ones(1,length(kj(terM1))));
    zeroS(kj(terM1))=cellfun(@(x) zeros(1,x-1),trNum,<mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>,false);

    trNum=mat2cell(s_intM(NofD,kj(terM1))',ones(1,length(kj(terM1))));
    zeroE(kj(terM1))=cellfun(@(x) zeros(1,NofD-x),trNum,<mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>,false);

    NofE_data2=cellfun(@(x,y,z) [x, y, z],zeroS,NofE_data,zeroE,<mwsh:strings xml:space="preserve">'UniformOutput'</mwsh:strings>,false);
<mwsh:keywords xml:space="preserve">else</mwsh:keywords>
    NofE_data2=NofE_data;
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

NofE_data_m=cell2mat(NofE_data2);</mwsh:code>
      </mcode-xmlized>
      <mcode-count>1</mcode-count>
      <cellOutputTarget>3</cellOutputTarget>
      <mcodeoutput class="codeoutput">binaryM
   0   0   0   1   1
   1   1   1   0   1
   1   1   0   0   1
   1   1   0   0   0
   1   0   1   1   0

doubleM
     3     3     3     1     1
     1     1     1     3     1
     1     1     3     3     1
     1     1     3     3     3
     1     3     1     1     3

intM
     1     1     2     3     5
     3     5     4     3     3
     5     5     1     3     5
     3     3     2     2     3
     5     3     5     5     3

intM2
     0     0     0     0     5
     0     5     0     0     0
     5     5     0     0     5
     0     0     0     0     0
     5     0     5     5     0

s_intM
     1     1     1     2     3
     3     3     2     3     3
     3     3     2     3     3
     5     5     4     3     5
     5     5     5     5     5

</mcodeoutput>
   </cell>
   <cell>
      <count>4</count>
      <steptitle>Supplementary information to publish</steptitle>
      <text>
         <p>If you want to make a pdf or html file on the code, you can use the code "x_publish_each_codes.m" in the same folder. Please change the file name as " this_file_tag='lec*_step*' " (* will be replaced to the number of the target file).</p>
         <p>The code "x_publish_all_codes.m" works for such a publication applying to all codes in the same folder (Note: "x_publish_all_codes_sub.m" should be located in the same folder).</p>
      </text>
      <cellOutputTarget>4</cellOutputTarget>
   </cell>
   <cell>
      <count>5</count>
      <cellOutputTarget>5</cellOutputTarget>
   </cell>
   <originalCode>%% MATLAB programming course for beginners, supported by Wagatsuma Lab@Kyutech 
%
% /* 
% The MIT License (MIT): 
% Copyright (c) 2022 Hiroaki Wagatsuma and Wagatsuma Lab@Kyutech
% 
% Permission is hereby granted, free of charge, to any person obtaining a
% copy of this software and associated documentation files (the
% "Software"), to deal in the Software without restriction, including
% without limitation the rights to use, copy, modify, merge, publish,
% distribute, sublicense, and/or sell copies of the Software, and to permit
% persons to whom the Software is furnished to do so, subject to the
% following conditions:
% 
% The above copyright notice and this permission notice shall be included
% in all copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
% NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
% DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
% USE OR OTHER DEALINGS IN THE SOFTWARE. */
%% Specifications and requirements
% # @Time    : 2022-8-10 
% # @Author  : Hiroaki Wagatsuma
% # @Site    : https://github.com/hirowgit/1A1_matlab_intermediate_course
% # @IDE     : MATLAB R2022a
% # @File    : lec0b_step2.m 

%%  Main program

NofD=5;
maxD=5;

rM=rand(NofD,NofD);

binaryM=(rM&gt;0.5);

disp('binaryM');
disp(binaryM);
key=find(~binaryM);

doubleM=double(binaryM);
doubleM(key)=3;
disp('doubleM');
disp(doubleM);

intM=floor(rM*maxD)+1;
disp('intM');
disp(intM);

key=find(intM&lt;5);
intM2=intM;
intM2(key)=0;
disp('intM2');
disp(intM2);

s_intM=sort(intM);
disp('s_intM');
disp(s_intM);


% s_intM=[
%      1     2     1     1     2
%      3     2     2     1     4
%      4     2     2     2     4
%      4     2     3     2     4
%      4     2     4     5     5];

% s_intM=[
%      1     2     1     1     1
%      2     3     2     2     1
%      2     3     3     2     1
%      4     5     3     2     3
%      5     5     5     2     5];

% s_intM=[
%      1     1     1     1     1
%      1     2     1     2     3
%      1     2     1     3     5
%      1     4     3     4     5
%      1     5     4     5     5];
% disp(s_intM);


dM=diff(s_intM);

[ki kj]=find(dM&gt;0);

LackNum=setdiff([1:NofD],unique(kj));

sM=sortrows([[zeros(length(LackNum),1); ki] [LackNum';kj]],2);
ki=sM(:,1); kj=sM(:,2);

mD=max(max(dM));
ti2=[]; tj2=[];
for i=2:mD
    [ti tj]=find(dM==i);
    if ~isempty(ti)
        sM=sortrows([[repmat(ti,[i-1,1]);ti2] [repmat(tj,[i-1,1]);tj2]],2);
        ti2=sM(:,1); tj2=sM(:,2);
    end
    
end

if ~isempty(ti2)
        sM=sortrows([[ti2; ki] [tj2; kj]],2);
        ki=sM(:,1); kj=sM(:,2);
end

sect_id=[0 find(diff(kj)&gt;0)' length(kj)];
sect=[sect_id(1:end-1)+1; sect_id(2:end)];
sect_eg=mat2cell(sect',ones(1,NofD),2);

sect_data=cellfun(@(x) sort(ki(x(1):x(2))),sect_eg,'UniformOutput',false);
key=cell2mat(cellfun(@(x) length(x)&lt;=1,sect_data,'UniformOutput',false));
key2=find(key);
key3=key2(cell2mat(sect_data(key))==0);
if sum(key3)&gt;0
    sect_data(key3)={[]};
end

NofE_data=cellfun(@(x) diff([0 x' NofD]),sect_data,'UniformOutput',false);
zeroS=cell(size(NofE_data));  
zeroE=cell(size(NofE_data));  

keyL=find(cell2mat(cellfun(@(x) length(x)&lt;maxD,NofE_data,'UniformOutput',false)));
if ~isempty(keyL)
    terM=cell2mat(sect_eg(keyL));

    terM1=terM(:,1);
    trNum=mat2cell(s_intM(1,kj(terM1))',ones(1,length(kj(terM1))));
    zeroS(kj(terM1))=cellfun(@(x) zeros(1,x-1),trNum,'UniformOutput',false);
    
    trNum=mat2cell(s_intM(NofD,kj(terM1))',ones(1,length(kj(terM1))));
    zeroE(kj(terM1))=cellfun(@(x) zeros(1,NofD-x),trNum,'UniformOutput',false);
    
    NofE_data2=cellfun(@(x,y,z) [x, y, z],zeroS,NofE_data,zeroE,'UniformOutput',false);
else 
    NofE_data2=NofE_data;
end

NofE_data_m=cell2mat(NofE_data2);


%% Supplementary information to publish
%
% If you want to make a pdf or html file on the code, 
% you can use the code "x_publish_each_codes.m" in the same folder. 
% Please change the file name as " this_file_tag='lec*_step*' "  
% (* will be replaced to the number of the target file). 
%
% The code "x_publish_all_codes.m" works for such a publication applying to all
% codes in the same folder (Note: "x_publish_all_codes_sub.m" should be located in the same folder).
%%
</originalCode>
   <m-file>lec0b_step2</m-file>
   <filename>/Users/hiro/Documents/github/1A1_matlab_intermediate_course/lec0b_step2.m</filename>
   <outputdir>/Users/hiro/Documents/github/1A1_matlab_intermediate_course/lec0b_step2</outputdir>
</mscript>